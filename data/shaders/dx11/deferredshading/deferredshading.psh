#include <common.h>
#include <dscommon.h>

Texture2D<float4> dataBlockMap1 : register(t1);
Texture2D<float4> dataBlockMap2 : register(t2);
Texture2D<uint3> dataBlockMap3 : register(t3);

PS_OUTPUT_DS main(PS_INPUT_DS input)
{
	PS_OUTPUT_DS output;
	
	// clip empty fragments
	uint3 dataBlock3 = dataBlockMap3.Load(int3(input.position.xy, 0));
	int matId = dataBlock3.x & 0x0000ffff;
	clip(matId - 1);

	float4 dataBlock1 = dataBlockMap1.Load(int3(input.position.xy, 0));
	float3 dataBlock2 = dataBlockMap2.Load(int3(input.position.xy, 0));
	float3 worldPos = dataBlock1.xyz;
	float3 normal = dataBlock2.xyz;
	
	float4 diffTex = unpackColor(dataBlock3.y);
	float4 specularTex = unpackColor(dataBlock3.z);
	float specularPower = dataBlock1.w;
	
	// lighting
	float3 diffColor, specColor, ambColor;
	blinn(normal, worldPos, specularPower, diffColor, specColor, ambColor);
	
	float3 diffuse = diffTex * diffColor;
	float3 specular = specularTex.rgb * specColor;
	float3 ambient = diffTex * ambColor;
	
	output.color = float4(saturate(ambient + diffuse + specular), diffTex.a);
	
    return output;
}