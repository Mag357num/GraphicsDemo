struct VS_OUTPUT
{
    float4 position : SV_POSITION;
	float2 uv0 : TEXCOORD0;
	float3 ts0 : TEXCOORD1;
	float3 ts1 : TEXCOORD2;
};

//uniform sampler2D diffuseSampler;
//uniform sampler2D normalSampler;
//uniform sampler2D specularSampler;

cbuffer spaceData
{
	matrix modelViewProjection : packoffset(c0);
	matrix model : packoffset(c4);
	float3 viewDirection : packoffset(c8);
};

struct LightData
{
	float3 positionOrDirection;
	uint lightType;
	float3 diffuseColor;
	float falloff;
	float3 ambientColor;
	float angle;
	float3 specularColor;
	uint dummy;
};
//StructuredBuffer<LightData> lightsData;

float4 main(VS_OUTPUT input) : SV_TARGET
{
	return float4(1, 0, 0, 1);
	/*float3 normalTS = (0, 0, 1);//normalize(texture(normalSampler, input.uv0).rgb * 2.0 - 1.0);
	float3x3 ts = float3x3(input.ts0, cross(input.ts1, input.ts0), input.ts1);
	float3 normal = mul(normalTS, ts);
	float ndol = max(0, dot(-lightsData[0].positionOrDirection, normal));
	
	float3 textureColor = float3(1, 0, 0); //texture(diffuseSampler, input.uv0).rgb;
	float3 diffuse = textureColor * ndol;
	
	//float3 reflectTS = reflect(lightDirTS, normalTS);
	float3 specular = float3(0, 0, 0);//pow(max(dot(reflectTS, -viewDirTS), 0), 16) * texture(specularSampler, input.uv0).rgb * ndol;
	
	float3 ambient = float3(0.3, 0.3, 0.3) * textureColor;
	
    return float4(ambient + diffuse + specular, 1);*/
}